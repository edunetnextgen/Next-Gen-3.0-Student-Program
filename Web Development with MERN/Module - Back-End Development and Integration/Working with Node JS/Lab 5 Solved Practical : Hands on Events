Objective:
Create a Node.js application that demonstrates event handling using the built-in events module. The application will define custom events, emit these events with data, and handle them using callbacks.
Problem Statement:
Create a Node.js application to demonstrate event handling with the events module, including defining, emitting, and handling custom events.
Procedure:
1.	Setting Up the Project:
Initialize the Project:
Create a new directory for your project (event-handling-app for example).
Open a terminal and navigate to your project directory.
2.	Implementing the Application (app.js):
Create app.js:
Create a file named app.js in your project directory. This file will contain the main logic of your event-driven application.
Implementing Event Emitter (app.js):
Open app.js in your text editor and write the following code:
// Import the built-in events module
const EventEmitter = require('events');

// Create an instance of EventEmitter
const myEmitter = new EventEmitter();

// Define an event handler function
const greetHandler = (name) => {
    console.log(`Hello, ${name}!`);
};

// Register the greet event with the greetHandler function
myEmitter.on('greet', greetHandler);

// Emit the greet event with different names
myEmitter.emit('greet', 'John');
myEmitter.emit('greet', 'Alice');

We import the built-in events module and create an instance of EventEmitter called myEmitter.
We define an event handler function greetHandler that logs a greeting message with the provided name.
We register (on) the greet event with the greetHandler function.
We emit (emit) the greet event with different names ('John' and 'Alice'), triggering the greetHandler callback each time.
3. Running the Application:
Execute app.js:
In your terminal,
 >> node app.js.
Check the console output for the greeting messages generated by the event handler callbacks.
Summary:
This project introduces you to events and callbacks in Node.js using the events module:
EventEmitter: The core of Node.js event-driven architecture.

Event Handling: Defining event handlers (on) to react to events emitted (emit) by an EventEmitter instance.
Callbacks: Using callback functions to handle events and perform actions in response to events.
This hands-on project is foundational for understanding event-driven programming in Node.js, essential for building scalable and responsive applications that react to various events and user interactions effectively.
